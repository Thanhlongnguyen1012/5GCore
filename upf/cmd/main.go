package main

import (
	"fmt"
	"net"
)

const (
	// PFCP ports & types
	PFCPPort                 = 8805
	SessionEstablishmentResp = 0x33
)

func main() {
	//upfURL := os.Getenv("UPF_BASE_URL")
	addr, err := net.ResolveUDPAddr("udp", "0.0.0.0:8805")
	if err != nil {
		fmt.Println("ResolveUDPAddr:", err)
	}
	conn, err := net.ListenUDP("udp", addr)
	if err != nil {
		fmt.Println("ListenUDP:", err)
	}
	defer conn.Close()
	fmt.Println("PFCP server listening on", addr)

	buf := make([]byte, 65535)
	for {
		n, cli, err := conn.ReadFromUDP(buf)
		if err != nil {
			fmt.Println("ReadFromUDP:", err)
			continue
		}
		fmt.Printf("Got %d bytes from %s\n", n, cli)

		// Build Response
		resp := buildPFCPResponse(buf[:n])
		_, err = conn.WriteToUDP(resp, cli)
		if err != nil {
			fmt.Println("WriteToUDP:", err)
		} else {
			fmt.Printf("Sent PFCP Session Establishment Response (%d bytes)\n", len(resp))
		}
	}
}

func buildPFCPResponse(req []byte) []byte {

	return []byte{0x21, 0x33, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x59, 0x48, 0x0, 0x1, 0x68, 0x0, 0x0, 0x3c, 0x0, 0x5, 0x0, 0xa, 0xf4, 0x1, 0x2c, 0x0, 0x13, 0x0, 0x1, 0x1, 0x0, 0x39, 0x0, 0xd, 0x2, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3b, 0xa, 0xf4, 0x1, 0x2c, 0x0, 0x8, 0x0, 0x13, 0x0, 0x38, 0x0, 0x2, 0x27, 0x11, 0x0, 0x15, 0x0, 0x9, 0x1, 0x0, 0x80, 0x2, 0x9a, 0xa, 0xcc, 0x44, 0x1, 0x0, 0x8, 0x0, 0x13, 0x0, 0x38, 0x0, 0x2, 0x0, 0x4, 0x0, 0x15, 0x0, 0x9, 0x1, 0x0, 0x80, 0x2, 0xa3, 0xa, 0xcc, 0x44, 0x1, 0x0, 0x8, 0x0, 0x13, 0x0, 0x38, 0x0, 0x2, 0x0, 0x6, 0x0, 0x15, 0x0, 0x9, 0x1, 0x0, 0x80, 0x2, 0xa3, 0xa, 0xcc, 0x44, 0x1}
}
